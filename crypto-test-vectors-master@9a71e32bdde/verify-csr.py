from ecc import *
from hashlib import sha256
'''
Prime:
    00ffffffff00000001000000000000000000000000ffffffffffffffffffffffff
A:
    00ffffffff00000001000000000000000000000000fffffffffffffffffffffffc
B
    5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b
Generator (uncompressed)
    04
    6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296
    4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5
Order
    00ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551
Cofactor  1 (0x1)
Seed
    c49d360886e704936a6678e1139d26b7819f7e90 
    
    WHERE IS THIS USED IN THE CODE???????????
    
'''

secp256r1 = ECurve(
   "secp256r1",
   "00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF",  # p
   #00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF
   "00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC",  # a
   #00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC
   "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B",  # b
   #5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B
   "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296",  # gx
   #6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296
   "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",  # gy
   #4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5
   "00FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551",  # n
   #00FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551
   1                                                                    # h
   )

# generator point
genP256 = ECPoint(secp256r1.gx, secp256r1.gy, secp256r1)

####################################################################################
# input
pubKeyStr = 'E12AB61285215C4E0DD993BD5784AB758025B8F1A3DA1F03F30A7F8D20732750' # compressed-y-1 0x03
rStr = 'E578A718599B2EE36DEAB1C0F4D0699B8E82056F01FC5BF25B0915AF66D17F67' # compressed-y-1 0x03
sStr = 'EB29FC870D708C1509087C740E82CF50AA936DD7A47891E3BE90EEC58FB70031'
data_oer = '01 81 80 00 01 60 D2 9D 48 44 81 05 72 73 65 5F\
31 00 00 00 00 04 60 D2 9D 48 86 00 02 83 01 01\
80 03 48 01 01 80 80 01 03 00 01 82 00 03 20 40\
95 00 03 20 40 97 01 00 80 80 83 E1 2A B6 12 85\
21 5C 4E 0D D9 93 BD 57 84 AB 75 80 25 B8 F1 A3\
DA 1F 03 F3 0A 7F 8D 20 73 27 50'

data_oer = data_oer.replace(' ', '')

print(data_oer)
#############################################################

pubKey = ECPoint("compressed-y-1", pubKeyStr)
#r = ECPoint("compressed-y-1", rStr)
r = rStr
s = sStr
digest = sha256(data_oer.decode('hex')).hexdigest()
to_verify = ECDSA(256, pubKey)
if (not to_verify.verify(digest, r, s)):
  raise Exception("ECDSA verify failed!")


